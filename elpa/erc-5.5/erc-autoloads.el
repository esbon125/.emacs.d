;;; erc-autoloads.el --- automatically extracted autoloads (do not edit)   -*- lexical-binding: t -*-
;; Generated by the `loaddefs-generate' function.

;; This file is part of GNU Emacs.

;;; Code:

(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))



;;; Generated autoloads from erc.el

(autoload 'erc-select-read-args "erc" "\
Prompt the user for values of nick, server, port, and password.")
(autoload 'erc "erc" "\
ERC is a powerful, modular, and extensible IRC client.
This function is the main entry point for ERC.

It allows selecting connection parameters, and then starts ERC.

Non-interactively, it takes the keyword arguments
   (server (erc-compute-server))
   (port   (erc-compute-port))
   (nick   (erc-compute-nick))
   (user   (erc-compute-user))
   password
   (full-name (erc-compute-full-name))
   id

That is, if called with

   (erc :server \"irc.libera.chat\" :full-name \"J. Random Hacker\")

then the server and full-name will be set to those values,
whereas `erc-compute-port' and `erc-compute-nick' will be invoked
for the values of the other parameters.

See `erc-tls' for the meaning of ID.

(fn &key (SERVER (erc-compute-server)) (PORT (erc-compute-port)) (NICK (erc-compute-nick)) (USER (erc-compute-user)) PASSWORD (FULL-NAME (erc-compute-full-name)) ID)" t)
(defalias 'erc-select #'erc)
(autoload 'erc-tls "erc" "\
ERC is a powerful, modular, and extensible IRC client.
This function is the main entry point for ERC over TLS.

It allows selecting connection parameters, and then starts ERC
over TLS.

Non-interactively, it takes the keyword arguments
   (server (erc-compute-server))
   (port   (erc-compute-port))
   (nick   (erc-compute-nick))
   (user   (erc-compute-user))
   password
   (full-name (erc-compute-full-name))
   client-certificate
   id

That is, if called with

   (erc-tls :server \"irc.libera.chat\" :full-name \"J. Random Hacker\")

then the server and full-name will be set to those values,
whereas `erc-compute-port' and `erc-compute-nick' will be invoked
for the values of their respective parameters.

CLIENT-CERTIFICATE, if non-nil, should either be a list where the
first element is the certificate key file name, and the second
element is the certificate file name itself, or t, which means
that `auth-source' will be queried for the key and the
certificate.  Authenticating using a TLS client certificate is
also referred to as \"CertFP\" (Certificate Fingerprint)
authentication by various IRC networks.

Example usage:

    (erc-tls :server \"irc.libera.chat\" :port 6697
             :client-certificate
             \\='(\"/home/bandali/my-cert.key\"
               \"/home/bandali/my-cert.crt\"))

When present, ID should be a symbol or a string to use for naming
the server buffer and identifying the connection unequivocally.
See Info node `(erc) Network Identifier' for details.  Like USER
and CLIENT-CERTIFICATE, this parameter cannot be specified
interactively.

(fn &key (SERVER (erc-compute-server)) (PORT (erc-compute-port \\='ircs-u)) (NICK (erc-compute-nick)) (USER (erc-compute-user)) PASSWORD (FULL-NAME (erc-compute-full-name)) CLIENT-CERTIFICATE ID)" t)
(autoload 'erc-handle-irc-url "erc" "\
Use ERC to IRC on HOST:PORT in CHANNEL.
If ERC is already connected to HOST:PORT, simply /join CHANNEL.
Otherwise, connect to HOST:PORT as NICK and /join CHANNEL.

Beginning with ERC 5.5, new connections require human intervention.
Customize `erc-url-connect-function' to override this.

(fn HOST PORT CHANNEL NICK PASSWORD &optional SCHEME)")
(register-definition-prefixes "erc" '("erc-"))


;;; Generated autoloads from erc-autoaway.el

(register-definition-prefixes "erc-autoaway" '("erc-auto"))


;;; Generated autoloads from erc-backend.el

(register-definition-prefixes "erc-backend" '("erc-"))


;;; Generated autoloads from erc-button.el

(register-definition-prefixes "erc-button" '("erc-"))


;;; Generated autoloads from erc-capab.el

(register-definition-prefixes "erc-capab" '("erc-capab-identify-"))


;;; Generated autoloads from erc-common.el

(register-definition-prefixes "erc-common" '("define-erc-module" "erc-"))


;;; Generated autoloads from erc-compat.el

(register-definition-prefixes "erc-compat" '("erc-"))


;;; Generated autoloads from erc-dcc.el

(register-definition-prefixes "erc-dcc" '("erc-" "pcomplete/erc-mode/"))


;;; Generated autoloads from erc-desktop-notifications.el

(register-definition-prefixes "erc-desktop-notifications" '("erc-notifications-"))


;;; Generated autoloads from erc-ezbounce.el

(register-definition-prefixes "erc-ezbounce" '("erc-ezb-"))


;;; Generated autoloads from erc-fill.el

(register-definition-prefixes "erc-fill" '("erc-"))


;;; Generated autoloads from erc-goodies.el

(register-definition-prefixes "erc-goodies" '("erc-"))


;;; Generated autoloads from erc-ibuffer.el

(register-definition-prefixes "erc-ibuffer" '("erc-"))


;;; Generated autoloads from erc-identd.el

(register-definition-prefixes "erc-identd" '("erc-identd-"))


;;; Generated autoloads from erc-imenu.el

(register-definition-prefixes "erc-imenu" '("erc-unfill-notice"))


;;; Generated autoloads from erc-join.el

(register-definition-prefixes "erc-join" '("erc-"))


;;; Generated autoloads from erc-lang.el

(register-definition-prefixes "erc-lang" '("erc-cmd-LANG" "iso-639-1-languages" "language"))


;;; Generated autoloads from erc-list.el

(register-definition-prefixes "erc-list" '("erc-"))


;;; Generated autoloads from erc-log.el

(register-definition-prefixes "erc-log" '("erc-"))


;;; Generated autoloads from erc-match.el

(register-definition-prefixes "erc-match" '("erc-"))


;;; Generated autoloads from erc-menu.el

(register-definition-prefixes "erc-menu" '("erc-menu-"))


;;; Generated autoloads from erc-netsplit.el

(register-definition-prefixes "erc-netsplit" '("erc-"))


;;; Generated autoloads from erc-networks.el

(autoload 'erc-determine-network "erc-networks" "\
Return the name of the network or \"Unknown\" as a symbol.
Use the server parameter NETWORK if provided, otherwise parse the
server name and search for a match in `erc-networks-alist'.")
(make-obsolete 'erc-determine-network '"maybe see `erc-networks--determine'" "29.1")
(autoload 'erc-server-select "erc-networks" "\
Interactively select a server to connect to using `erc-server-alist'." t)
(register-definition-prefixes "erc-networks" '("erc-"))


;;; Generated autoloads from erc-notify.el

(register-definition-prefixes "erc-notify" '("erc-"))


;;; Generated autoloads from erc-page.el

(register-definition-prefixes "erc-page" '("erc-"))


;;; Generated autoloads from erc-pcomplete.el

(register-definition-prefixes "erc-pcomplete" '("erc-pcomplet" "pcomplete"))


;;; Generated autoloads from erc-replace.el

(register-definition-prefixes "erc-replace" '("erc-replace-"))


;;; Generated autoloads from erc-ring.el

(register-definition-prefixes "erc-ring" '("erc-"))


;;; Generated autoloads from erc-sasl.el

(register-definition-prefixes "erc-sasl" '("erc-sasl-"))


;;; Generated autoloads from erc-services.el

(register-definition-prefixes "erc-services" '("erc-"))


;;; Generated autoloads from erc-sound.el

(register-definition-prefixes "erc-sound" '("erc-"))


;;; Generated autoloads from erc-speedbar.el

(register-definition-prefixes "erc-speedbar" '("erc-"))


;;; Generated autoloads from erc-spelling.el

(register-definition-prefixes "erc-spelling" '("erc-spelling-"))


;;; Generated autoloads from erc-stamp.el

(register-definition-prefixes "erc-stamp" '("erc-"))


;;; Generated autoloads from erc-status-sidebar.el

(register-definition-prefixes "erc-status-sidebar" '("erc-status-sidebar-"))


;;; Generated autoloads from erc-track.el

(register-definition-prefixes "erc-track" '("erc-"))


;;; Generated autoloads from erc-truncate.el

(register-definition-prefixes "erc-truncate" '("erc-max-buffer-size"))


;;; Generated autoloads from erc-xdcc.el

(register-definition-prefixes "erc-xdcc" '("erc-"))

;;; End of scraped data

(provide 'erc-autoloads)

;; Local Variables:
;; version-control: never
;; no-byte-compile: t
;; no-update-autoloads: t
;; no-native-compile: t
;; coding: utf-8-emacs-unix
;; End:

;;; erc-autoloads.el ends here
